class Solution {
public:
    void fullAdder(char &ch1, char &ch2, char &carry, char &res){
        res = ch1 ^ ch2 ^ carry;
        char new_carry = (ch1 & ch2) + (ch2 & carry) + (ch1 & carry);
        carry = new_carry;
    }
    string addBinary(string a, string b){ 
        int cursor1 = a.size()-1;
        int cursor2 = b.size()-1;
        string result = "";
        char carry = '0';
        char ch1, ch2, res;
        carry = '0'; ch1 = '0'; ch2 = '0';
        fullAdder(ch1, ch2, carry, res);
        cout << "Checking full adder now...." << endl;
        cout << "result: " << res << ", carry: " << carry << endl;
        while(cursor1 >= 0 && cursor2 >= 0){
            ch1 = a[cursor1];
            ch2 = b[cursor2];
            fullAdder(ch1, ch2, carry, res);
            result = res + result;
            cursor1--;
            cursor2--;
        }
        if(cursor1 < 0){
            while(cursor2 >= 0){
                ch1 = '0';
                ch2 = b[cursor2];
                fullAdder(ch1, ch2, carry, res);
                result = res + result;
                cursor2--;
            }  
        }
        else{
            while(cursor1 >= 0){
                ch1 = b[cursor1];
                ch2 = '0';
                fullAdder(ch1, ch2, carry, res);
                result = res + result;
                cursor1--;
            }
        }
        return result;    
    }
};