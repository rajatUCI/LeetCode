class Solution {
public:
    unordered_map<int,int> memomap;
    int robsubprob(vector<int>& nums, int i){
        if(i <= 1){
            memomap[i] = nums[i];
            return nums[i];
        }     
        auto it = memomap.find(i);
        if(it != memomap.end()){
            return it->second;
        }
        int m = INT_MIN;
        for(int j=0; j < i-1; j++){
            m = max(robsubprob(nums,j) + nums[i], m);
        }
        memomap[i] = m;
        return m;
    }
    int rob(vector<int>& nums) {
        if(nums.size() == 0)
            return 0;
        return max(robsubprob(nums, nums.size()-1), robsubprob(nums, nums.size()-2));
        /* 
        "Optimization done, but general approach is the following one,
        As we know, the money cannot be a negative value, 
        we can be certain that the robber will either end at last or second last house at the end."
        
        int curr_max, final_max = INT_MIN;
        for(int i=0; i < nums.size(); i++){
            curr_max = robsubprob(nums, i);
            final_max = max(curr_max, final_max);
            cout << "Iteration i: " << i <<endl;
            cout << "Curr_max: " << curr_max << ", final_max: " << final_max << endl;
        }
        return final_max;*/
    }
};