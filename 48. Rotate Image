class Solution {
public:
    void print(vector<vector<int>>& matrix){
        int n = matrix[0].size();
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                cout << matrix[i][j] << "  ";
            }
            cout << endl;
        }
    }
    void calculateNextPlace(int &curr_i, int &curr_j, int &next_i, int &next_j, int &n){
        next_i = curr_j;
        next_j = n-1-curr_i;
    }
    void inPlaceRotation(vector<vector<int>>& matrix, int &n, int &curr_i, int &curr_j){
        int next_i, next_j, buffer;
        next_i = 0; next_j = 0; 
        for(int i=0; i< n+1; i++){
            calculateNextPlace(curr_i, curr_j, next_i, next_j, n);
            buffer = matrix[next_i][next_j];
            matrix[curr_i][curr_j] = matrix[next_i][next_j];
            curr_i = next_i;
            curr_j = next_j;
        }   
    }
    void rotate(vector<vector<int>>& matrix) {
        int n = matrix[0].size();
        int center = (int)(n/2);
        for(int i=0; i < center ; i++){
            for(int j=0; j < n-1; j++){
                inPlaceRotation(matrix, n, i, j);
            }
        }
    }
};