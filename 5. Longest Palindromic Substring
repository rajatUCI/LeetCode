class Solution {
public:
    string longestPalindrome(string s) {
        // Base Cases
        if(s.size() == 0 || s.size() == 1){
            return s;
        }
        if(s.size() == 2){
            if(s[0] == s[1])
                return s;
            else{
                string s1 = to_string(s[0]);
                return s1;
            }   
        }
        int prev,next;
        // Calculating odd-sized palindrome values for each index
        vector<int> odd_dp(s.size(),1);
        for(int i = 0; i < s.size(); i++){
            prev = i-1;
            next = i+1;
            while(prev > -1 && next < s.size()){
                if(s[prev] == s[next]){
                    odd_dp[i] += 2;
                    prev--;
                    next++;
                }
                else{
                    break;
                }
            }
        }
        // Calculating even-sized palindrome values for each index
        vector<int> even_dp(s.size(),0);
        for(int i = 0; i < s.size(); i++){
            prev = i;
            next = i+1;
            while(prev > -1 && next < s.size()){
                if(s[prev] == s[next]){
                    even_dp[i] += 2;
                    prev--;
                    next++;
                }
                else{
                    break;
                }
            }
        }
        // Length of max-palindromic substring
        int max_value = max(*max_element(odd_dp.begin(), odd_dp.end()), *max_element(even_dp.begin(), even_dp.end()));
        int start_index, i;
        // Came from even_dp array
        if(max_value % 2 == 0){
            for(i = 0; i < even_dp.size(); i++){
                if(even_dp[i] == max_value){
                    start_index = i - (max_value/2) + 1;
                }
            }  
        }
        // Came from odd_dp array
        else{
            for(i = 0; i < odd_dp.size(); i++){
                if(odd_dp[i] == max_value){ 
                    start_index = i - ((max_value-1)/2);
                }
            }
        }
        string result = s.substr(start_index,max_value);
        return result;
    }
};